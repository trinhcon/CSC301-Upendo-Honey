Frontend Documentation

#######  Dependencies #########
>>>Technologies Used (in order of recommended learning):
React JS (requires HTML, JavaScript (JS) & CSS)
Node Package Manager (npm)
React Routing
Git
React JS connection with Django backend


>>> installed packages
Pure React with the following non-standard packages (applied through "npm install <package> --save"):

(package.json):
react-router-dom
react-scripts
react-swipeable
emailjs-com


>>> Overall Structure of files
The Upendo Promotion App's frontend is divided into flows (Beekeeper, Honey, Forest & Tanzania).
The "src" file contains the overall App.js, landing-page.js (where a code is inputted),
and three main folders:
	-Flows (containing the .js files for all of the slides which promote Upendo)
		(also contains the menu, from which all flows can be accessed)
	-images (contains the icons and other aesthetic features of the promotion App)
	-modules (code used frequently in a number of files, contains functions for fetching)


Data Structure and Flow:
Following React's standard data flow, most data is stored in the App.JS Component,
from which data is passed to individual flows once they are processed. There are
two ways of entry into the Upendo application: with a URL, or with an alphanumeric
code on the landing page. From the landing page, a code (presumably from a honey
product) can be entered to take the user to a customized flow for the beekeeper
who contributed to the honey. Alternatively, a code can be embedded within the
website's URL to begin at a specified slide of choice in the entire app.
Codes are alphanumeric and all capitalized. If a code in the URL is incorrect, a
default code is used.

The code determines what unique data is to be retrieved from the backend, to be
displayed for the user throughout the app. The data is retrieved only once, upon
entry into the application, (through the landing page an URL). The data is then
stored there to be used as each view is rendered for the user.


>>> Third Party tools and services
The frontend App uses an emailing API and a transactional email service to send
email from its form. They are EmailJS and sendgrid respectively. EmailJS connects
our react frontend to sendgrid, which sends the email to a designated email.
They respectively limit 200 per month and 100/day. Once exhausted, this includes
frontend development testing, so use sparingly. The credentials are in the
possession of the partners, ask them if you need access to the accounts from
these services to configure the emailing form.
